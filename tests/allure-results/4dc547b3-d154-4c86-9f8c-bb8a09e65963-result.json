{"name": "Successful fill form", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=100.0.4896.60)\nStacktrace:\n#0 0x558fd6ea2013 <unknown>\n#1 0x558fd6c0489f <unknown>\n#2 0x558fd6bf0388 <unknown>\n#3 0x558fd6beed52 <unknown>\n#4 0x558fd6beef32 <unknown>\n#5 0x558fd6c064ca <unknown>\n#6 0x558fd6c6c2ef <unknown>\n#7 0x558fd6c58932 <unknown>\n#8 0x558fd6c6bb94 <unknown>\n#9 0x558fd6c58823 <unknown>\n#10 0x558fd6c2e08a <unknown>\n#11 0x558fd6c2f1e5 <unknown>\n#12 0x558fd6ecfe5d <unknown>\n#13 0x558fd6ee9061 <unknown>\n#14 0x558fd6ed1bb5 <unknown>\n#15 0x558fd6ee9e08 <unknown>\n#16 0x558fd6ec52f0 <unknown>\n#17 0x558fd6f05988 <unknown>\n#18 0x558fd6f05b08 <unknown>\n#19 0x558fd6f1f5dd <unknown>\n#20 0x7ff588c2b609 <unknown>", "trace": "browser_management = None\nbrowser_setup = <selene.core.entity.Browser object at 0x7f46e23ec350>\n\n    @allure.title('Successful fill form')\n    def test_successful(browser_management, browser_setup):\n        browser = browser_setup\n    \n        with allure.step('Open registration form'):\n>           browser.open('/automation-practice-form')\n\ntest_registration_form.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../venv/lib/python3.11/site-packages/selene/core/entity.py:1154: in open\n    self.config._executor.get_url(relative_or_absolute_url)\n../venv/lib/python3.11/site-packages/selene/core/configuration.py:303: in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n../venv/lib/python3.11/site-packages/selene/core/configuration.py:255: in get\n    driver.get(url)\n../venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:449: in get\n    self.execute(Command.GET, {\"url\": url})\n../venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f46e24c4a10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...\\\\n#18 0x558fd6f05b08 \\\\u003Cunknown>\\\\n#19 0x558fd6f1f5dd \\\\u003Cunknown>\\\\n#20 0x7ff588c2b609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=100.0.4896.60)\nE       Stacktrace:\nE       #0 0x558fd6ea2013 <unknown>\nE       #1 0x558fd6c0489f <unknown>\nE       #2 0x558fd6bf0388 <unknown>\nE       #3 0x558fd6beed52 <unknown>\nE       #4 0x558fd6beef32 <unknown>\nE       #5 0x558fd6c064ca <unknown>\nE       #6 0x558fd6c6c2ef <unknown>\nE       #7 0x558fd6c58932 <unknown>\nE       #8 0x558fd6c6bb94 <unknown>\nE       #9 0x558fd6c58823 <unknown>\nE       #10 0x558fd6c2e08a <unknown>\nE       #11 0x558fd6c2f1e5 <unknown>\nE       #12 0x558fd6ecfe5d <unknown>\nE       #13 0x558fd6ee9061 <unknown>\nE       #14 0x558fd6ed1bb5 <unknown>\nE       #15 0x558fd6ee9e08 <unknown>\nE       #16 0x558fd6ec52f0 <unknown>\nE       #17 0x558fd6f05988 <unknown>\nE       #18 0x558fd6f05b08 <unknown>\nE       #19 0x558fd6f1f5dd <unknown>\nE       #20 0x7ff588c2b609 <unknown>\n\n../venv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: InvalidArgumentException"}, "steps": [{"name": "Open registration form", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=100.0.4896.60)\nStacktrace:\n#0 0x558fd6ea2013 <unknown>\n#1 0x558fd6c0489f <unknown>\n#2 0x558fd6bf0388 <unknown>\n#3 0x558fd6beed52 <unknown>\n#4 0x558fd6beef32 <unknown>\n#5 0x558fd6c064ca <unknown>\n#6 0x558fd6c6c2ef <unknown>\n#7 0x558fd6c58932 <unknown>\n#8 0x558fd6c6bb94 <unknown>\n#9 0x558fd6c58823 <unknown>\n#10 0x558fd6c2e08a <unknown>\n#11 0x558fd6c2f1e5 <unknown>\n#12 0x558fd6ecfe5d <unknown>\n#13 0x558fd6ee9061 <unknown>\n#14 0x558fd6ed1bb5 <unknown>\n#15 0x558fd6ee9e08 <unknown>\n#16 0x558fd6ec52f0 <unknown>\n#17 0x558fd6f05988 <unknown>\n#18 0x558fd6f05b08 <unknown>\n#19 0x558fd6f1f5dd <unknown>\n#20 0x7ff588c2b609 <unknown>\n\n", "trace": "  File \"/home/rimski/PycharmProjects/demoqa_registration_form/tests/test_registration_form.py\", line 12, in test_successful\n    browser.open('/automation-practice-form')\n  File \"/home/rimski/PycharmProjects/demoqa_registration_form/venv/lib/python3.11/site-packages/selene/core/entity.py\", line 1154, in open\n    self.config._executor.get_url(relative_or_absolute_url)\n  File \"/home/rimski/PycharmProjects/demoqa_registration_form/venv/lib/python3.11/site-packages/selene/core/configuration.py\", line 303, in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n  File \"/home/rimski/PycharmProjects/demoqa_registration_form/venv/lib/python3.11/site-packages/selene/core/configuration.py\", line 255, in get\n    driver.get(url)\n  File \"/home/rimski/PycharmProjects/demoqa_registration_form/venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 449, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/home/rimski/PycharmProjects/demoqa_registration_form/venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"/home/rimski/PycharmProjects/demoqa_registration_form/venv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1685269381997, "stop": 1685269382113}], "start": 1685269381997, "stop": 1685269382115, "uuid": "5c7a7bf2-f785-4b42-88a5-1dce4b9f8f11", "historyId": "a3da2b33f3ca61428ffa8484c0eb7dcc", "testCaseId": "a3da2b33f3ca61428ffa8484c0eb7dcc", "fullName": "tests.test_registration_form#test_successful", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_registration_form"}, {"name": "host", "value": "rimski-Nitro-AN515-54"}, {"name": "thread", "value": "15863-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_registration_form"}]}